{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst apiUrl = \"http://localhost:8000/\";\nexport const fetchAsyncLogin = createAsyncThunk(\"login/post\", async auth => {\n  const res = await axios.post(`${apiUrl}authen/jwt/create`, auth, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return res.data;\n});\nexport const fetchAsyncRegister = createAsyncThunk(\"create/post\", async auth => {\n  const res = await axios.post(`${apiUrl}api/create/`, auth, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return res.data;\n});\nconst loginSlice = createSlice({\n  name: \"login\",\n  initialState: {\n    authen: {\n      username: \"\",\n      password: \"\"\n    },\n    isLoginView: true\n  },\n  reducers: {\n    editUsername(state, action) {\n      state.authen.username = action.payload;\n    },\n\n    editPassword(state, action) {\n      state.authen.password = action.payload;\n    },\n\n    toggleMode(state) {\n      state.isLoginView = !state.isLoginView;\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchAsyncLogin.fulfilled, (state, action) => {\n      action.payload.access && (window.location.href = \"/report/\");\n    });\n  }\n});\nexport const {\n  editUsername,\n  editPassword,\n  toggleMode\n} = loginSlice.actions;\nexport const selectAuthen = state => state.login.authen;\nexport const selectIsLoginView = state => state.login.isLoginView;\nexport default loginSlice.reducer;","map":{"version":3,"sources":["/Users/kurokiso/Desktop/ut_finace/finance_web/git/front/src/features/login/loginSlice.js"],"names":["createSlice","createAsyncThunk","axios","apiUrl","fetchAsyncLogin","auth","res","post","headers","data","fetchAsyncRegister","loginSlice","name","initialState","authen","username","password","isLoginView","reducers","editUsername","state","action","payload","editPassword","toggleMode","extraReducers","builder","addCase","fulfilled","access","window","location","href","actions","selectAuthen","login","selectIsLoginView","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,MAAM,GAAG,wBAAf;AAEA,OAAO,MAAMC,eAAe,GAAGH,gBAAgB,CAAC,YAAD,EAAe,MAAOI,IAAP,IAAgB;AAC5E,QAAMC,GAAG,GAAG,MAAMJ,KAAK,CAACK,IAAN,CAAY,GAAEJ,MAAO,mBAArB,EAAyCE,IAAzC,EAA+C;AAC/DG,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADsD,GAA/C,CAAlB;AAKA,SAAOF,GAAG,CAACG,IAAX;AACD,CAP8C,CAAxC;AASP,OAAO,MAAMC,kBAAkB,GAAGT,gBAAgB,CAChD,aADgD,EAEhD,MAAOI,IAAP,IAAgB;AACd,QAAMC,GAAG,GAAG,MAAMJ,KAAK,CAACK,IAAN,CAAY,GAAEJ,MAAO,aAArB,EAAmCE,IAAnC,EAAyC;AACzDG,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADgD,GAAzC,CAAlB;AAKA,SAAOF,GAAG,CAACG,IAAX;AACD,CAT+C,CAA3C;AAYP,MAAME,UAAU,GAAGX,WAAW,CAAC;AAC7BY,EAAAA,IAAI,EAAE,OADuB;AAE7BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,MAAM,EAAE;AACNC,MAAAA,QAAQ,EAAE,EADJ;AAENC,MAAAA,QAAQ,EAAE;AAFJ,KADI;AAKZC,IAAAA,WAAW,EAAE;AALD,GAFe;AAS7BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC1BD,MAAAA,KAAK,CAACN,MAAN,CAAaC,QAAb,GAAwBM,MAAM,CAACC,OAA/B;AACD,KAHO;;AAIRC,IAAAA,YAAY,CAACH,KAAD,EAAQC,MAAR,EAAgB;AAC1BD,MAAAA,KAAK,CAACN,MAAN,CAAaE,QAAb,GAAwBK,MAAM,CAACC,OAA/B;AACD,KANO;;AAORE,IAAAA,UAAU,CAACJ,KAAD,EAAQ;AAChBA,MAAAA,KAAK,CAACH,WAAN,GAAoB,CAACG,KAAK,CAACH,WAA3B;AACD;;AATO,GATmB;AAoB7BQ,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBvB,eAAe,CAACwB,SAAhC,EAA2C,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC5DA,MAAAA,MAAM,CAACC,OAAP,CAAeO,MAAf,KAA0BC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,UAAjD;AACD,KAFD;AAGD;AAxB4B,CAAD,CAA9B;AA0BA,OAAO,MAAM;AAAEb,EAAAA,YAAF;AAAgBI,EAAAA,YAAhB;AAA8BC,EAAAA;AAA9B,IAA6Cb,UAAU,CAACsB,OAA9D;AACP,OAAO,MAAMC,YAAY,GAAId,KAAD,IAAWA,KAAK,CAACe,KAAN,CAAYrB,MAA5C;AACP,OAAO,MAAMsB,iBAAiB,GAAIhB,KAAD,IAAWA,KAAK,CAACe,KAAN,CAAYlB,WAAjD;AAEP,eAAeN,UAAU,CAAC0B,OAA1B","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nconst apiUrl = \"http://localhost:8000/\";\n\nexport const fetchAsyncLogin = createAsyncThunk(\"login/post\", async (auth) => {\n  const res = await axios.post(`${apiUrl}authen/jwt/create`, auth, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  return res.data;\n});\n\nexport const fetchAsyncRegister = createAsyncThunk(\n  \"create/post\",\n  async (auth) => {\n    const res = await axios.post(`${apiUrl}api/create/`, auth, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    return res.data;\n  }\n);\n\nconst loginSlice = createSlice({\n  name: \"login\",\n  initialState: {\n    authen: {\n      username: \"\",\n      password: \"\",\n    },\n    isLoginView: true,\n  },\n  reducers: {\n    editUsername(state, action) {\n      state.authen.username = action.payload;\n    },\n    editPassword(state, action) {\n      state.authen.password = action.payload;\n    },\n    toggleMode(state) {\n      state.isLoginView = !state.isLoginView;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchAsyncLogin.fulfilled, (state, action) => {\n      action.payload.access && (window.location.href = \"/report/\");\n    });\n  },\n});\nexport const { editUsername, editPassword, toggleMode } = loginSlice.actions;\nexport const selectAuthen = (state) => state.login.authen;\nexport const selectIsLoginView = (state) => state.login.isLoginView;\n\nexport default loginSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}