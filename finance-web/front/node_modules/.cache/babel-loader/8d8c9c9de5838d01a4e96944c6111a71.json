{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst ENDPOINT = process.env.REACT_APP_ENDPOINT;\nconst apiUrl = String(ENDPOINT);\nexport const fetchAsyncLogin = createAsyncThunk(\"login/post\", async auth => {\n  const res = await axios.post(`${apiUrl}authen/jwt/create`, auth, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return res.data;\n});\nexport const fetchAsyncRegister = createAsyncThunk(\"create/post\", async auth => {\n  const createData = new FormData();\n  createData.append('Email', auth.email);\n  createData.append('password', auth.password);\n  createData.append('Username', 'all');\n  const res = await axios.post(`${apiUrl}api/create/`, auth, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return res.data;\n});\nconst loginSlice = createSlice({\n  name: \"login\",\n  initialState: {\n    authen: {\n      email: \"\",\n      password: \"\"\n    },\n    isLoginView: true\n  },\n  reducers: {\n    editEmail(state, action) {\n      state.authen.email = action.payload;\n    },\n\n    editPassword(state, action) {\n      state.authen.password = action.payload;\n    },\n\n    toggleMode(state) {\n      state.isLoginView = !state.isLoginView;\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchAsyncLogin.fulfilled, (state, action) => {\n      action.payload.access && (window.location.href = \"/report/\");\n    });\n  }\n});\nexport const {\n  editEmail,\n  editPassword,\n  toggleMode\n} = loginSlice.actions;\nexport const selectAuthen = state => state.login.authen;\nexport const selectIsLoginView = state => state.login.isLoginView;\nexport default loginSlice.reducer;","map":{"version":3,"sources":["/Users/kurokiso/Desktop/ut_finace/finance_web/new_git/finance_web/front/src/features/login/loginSlice.js"],"names":["createSlice","createAsyncThunk","axios","ENDPOINT","process","env","REACT_APP_ENDPOINT","apiUrl","String","fetchAsyncLogin","auth","res","post","headers","data","fetchAsyncRegister","createData","FormData","append","email","password","loginSlice","name","initialState","authen","isLoginView","reducers","editEmail","state","action","payload","editPassword","toggleMode","extraReducers","builder","addCase","fulfilled","access","window","location","href","actions","selectAuthen","login","selectIsLoginView","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,kBAA7B;AACA,MAAMC,MAAM,GAAGC,MAAM,CAACL,QAAD,CAArB;AAEA,OAAO,MAAMM,eAAe,GAAGR,gBAAgB,CAAC,YAAD,EAAe,MAAOS,IAAP,IAAgB;AAC5E,QAAMC,GAAG,GAAG,MAAMT,KAAK,CAACU,IAAN,CAAY,GAAEL,MAAO,mBAArB,EAAyCG,IAAzC,EAA+C;AAC/DG,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADsD,GAA/C,CAAlB;AAKA,SAAOF,GAAG,CAACG,IAAX;AACD,CAP8C,CAAxC;AASP,OAAO,MAAMC,kBAAkB,GAAGd,gBAAgB,CAChD,aADgD,EAEhD,MAAOS,IAAP,IAAgB;AACd,QAAMM,UAAU,GAAG,IAAIC,QAAJ,EAAnB;AACAD,EAAAA,UAAU,CAACE,MAAX,CAAkB,OAAlB,EAA2BR,IAAI,CAACS,KAAhC;AACAH,EAAAA,UAAU,CAACE,MAAX,CAAkB,UAAlB,EAA8BR,IAAI,CAACU,QAAnC;AACAJ,EAAAA,UAAU,CAACE,MAAX,CAAkB,UAAlB,EAA8B,KAA9B;AACA,QAAMP,GAAG,GAAG,MAAMT,KAAK,CAACU,IAAN,CAAY,GAAEL,MAAO,aAArB,EAAmCG,IAAnC,EAAyC;AACzDG,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADgD,GAAzC,CAAlB;AAKA,SAAOF,GAAG,CAACG,IAAX;AACD,CAb+C,CAA3C;AAgBP,MAAMO,UAAU,GAAGrB,WAAW,CAAC;AAC7BsB,EAAAA,IAAI,EAAE,OADuB;AAE7BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,MAAM,EAAE;AACNL,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,QAAQ,EAAE;AAFJ,KADI;AAKZK,IAAAA,WAAW,EAAE;AALD,GAFe;AAS7BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACvBD,MAAAA,KAAK,CAACJ,MAAN,CAAaL,KAAb,GAAqBU,MAAM,CAACC,OAA5B;AACD,KAHO;;AAIRC,IAAAA,YAAY,CAACH,KAAD,EAAQC,MAAR,EAAgB;AAC1BD,MAAAA,KAAK,CAACJ,MAAN,CAAaJ,QAAb,GAAwBS,MAAM,CAACC,OAA/B;AACD,KANO;;AAORE,IAAAA,UAAU,CAACJ,KAAD,EAAQ;AAChBA,MAAAA,KAAK,CAACH,WAAN,GAAoB,CAACG,KAAK,CAACH,WAA3B;AACD;;AATO,GATmB;AAoB7BQ,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgB1B,eAAe,CAAC2B,SAAhC,EAA2C,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC5DA,MAAAA,MAAM,CAACC,OAAP,CAAeO,MAAf,KAA0BC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,UAAjD;AACD,KAFD;AAGD;AAxB4B,CAAD,CAA9B;AA0BA,OAAO,MAAM;AAAEb,EAAAA,SAAF;AAAaI,EAAAA,YAAb;AAA2BC,EAAAA;AAA3B,IAA0CX,UAAU,CAACoB,OAA3D;AACP,OAAO,MAAMC,YAAY,GAAId,KAAD,IAAWA,KAAK,CAACe,KAAN,CAAYnB,MAA5C;AACP,OAAO,MAAMoB,iBAAiB,GAAIhB,KAAD,IAAWA,KAAK,CAACe,KAAN,CAAYlB,WAAjD;AAEP,eAAeJ,UAAU,CAACwB,OAA1B","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nconst ENDPOINT = process.env.REACT_APP_ENDPOINT\nconst apiUrl = String(ENDPOINT);\n\nexport const fetchAsyncLogin = createAsyncThunk(\"login/post\", async (auth) => {\n  const res = await axios.post(`${apiUrl}authen/jwt/create`, auth, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  return res.data;\n});\n\nexport const fetchAsyncRegister = createAsyncThunk(\n  \"create/post\",\n  async (auth) => {\n    const createData = new FormData();\n    createData.append('Email', auth.email)\n    createData.append('password', auth.password)\n    createData.append('Username', 'all')\n    const res = await axios.post(`${apiUrl}api/create/`, auth, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    return res.data;\n  }\n);\n\nconst loginSlice = createSlice({\n  name: \"login\",\n  initialState: {\n    authen: {\n      email: \"\",\n      password: \"\",\n    },\n    isLoginView: true,\n  },\n  reducers: {\n    editEmail(state, action) {\n      state.authen.email = action.payload;\n    },\n    editPassword(state, action) {\n      state.authen.password = action.payload;\n    },\n    toggleMode(state) {\n      state.isLoginView = !state.isLoginView;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchAsyncLogin.fulfilled, (state, action) => {\n      action.payload.access && (window.location.href = \"/report/\");\n    });\n  },\n});\nexport const { editEmail, editPassword, toggleMode } = loginSlice.actions;\nexport const selectAuthen = (state) => state.login.authen;\nexport const selectIsLoginView = (state) => state.login.isLoginView;\n\nexport default loginSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}