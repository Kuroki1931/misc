{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport Tabletop from 'tabletop';\nimport axios from \"axios\";\nconst apiUrl = \"http://3.14.82.87:1337/\";\nexport const getSpredSheet = createAsyncThunk(\"company/get\", async () => {\n  const res = Tabletop.init({\n    key: '1iQhGbFVfEGXLVzrsbxKi-SwVsXkDWI_XyrrFok8rTdk'\n  }).then(data => {\n    return data;\n  });\n  return res;\n});\nexport const fetchAsynCampanyList_Get = createAsyncThunk(\"company_list/get\", async () => {\n  const res = await axios.get(`${apiUrl}api/company/`, {\n    headers: {}\n  });\n  return res.data;\n});\nexport const fetchAsynCampany_Get = createAsyncThunk(\"company_info/get\", async id => {\n  const res = await axios.get(`${apiUrl}api/company/${id}`, {\n    headers: {}\n  });\n  return res.data;\n});\nconst companySlice = createSlice({\n  name: 'company',\n  initialState: {\n    info: {\n      elements: [{\n        id: 0,\n        ローマ字: '',\n        企業名: '',\n        分類: ''\n      }]\n    },\n    sheet: {\n      info: {\n        elements: [{\n          id: 0,\n          ローマ字: '',\n          企業名: '',\n          分類: ''\n        }]\n      },\n      _table: {\n        elements: [{\n          項目: '',\n          内容: '',\n          url: ''\n        }],\n        name: ''\n      },\n      _news: {\n        elements: [{\n          題名: '',\n          リンク: '',\n          url: ''\n        }],\n        name: ''\n      },\n      _keywords: {\n        elements: [{\n          題名: '',\n          リンク: '',\n          url: ''\n        }],\n        name: ''\n      }\n    },\n    company_list: [{\n      id: '',\n      name: '',\n      keyword: {},\n      news: {},\n      recruit: {}\n    }],\n    company_info: {\n      id: '',\n      name: '',\n      keyword: {},\n      news: {},\n      recruit: {}\n    }\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getSpredSheet.fulfilled, (state, action) => {\n      state.sheet = action.payload;\n    });\n    builder.addCase(fetchAsynCampanyList_Get.fulfilled, (state, action) => {\n      state.company_list = action.payload;\n    });\n    builder.addCase(fetchAsynCampany_Get.fulfilled, (state, action) => {\n      state.company_info = action.payload;\n    });\n  }\n});\nexport const {} = companySlice.actions;\nexport const selectSheet = state => state.company.sheet;\nexport const selectCompany_list = state => state.company.company_list;\nexport const selectCompany_info = state => state.company.company_info;\nexport default companySlice.reducer;","map":{"version":3,"sources":["/Users/kurokiso/Desktop/ut_finace/ut_finance/ut_web/front/src/features/company/companySlice.js"],"names":["createSlice","createAsyncThunk","Tabletop","axios","apiUrl","getSpredSheet","res","init","key","then","data","fetchAsynCampanyList_Get","get","headers","fetchAsynCampany_Get","id","companySlice","name","initialState","info","elements","ローマ字","企業名","分類","sheet","_table","項目","内容","url","_news","題名","リンク","_keywords","company_list","keyword","news","recruit","company_info","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","actions","selectSheet","company","selectCompany_list","selectCompany_info","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport Tabletop from 'tabletop';\nimport axios from \"axios\";\n\nconst apiUrl = \"http://3.14.82.87:1337/\";\n\nexport const getSpredSheet = createAsyncThunk(\"company/get\", async() => {\n    const res = Tabletop.init({\n        key: '1iQhGbFVfEGXLVzrsbxKi-SwVsXkDWI_XyrrFok8rTdk',\n    })\n    .then((data) => {\n        return data\n    })\n    return res\n})\n\nexport const fetchAsynCampanyList_Get = createAsyncThunk(\"company_list/get\", async () => {\n    const res = await axios.get(`${apiUrl}api/company/`, {\n      headers: { \n      },\n    });\n    return res.data;\n});\n\nexport const fetchAsynCampany_Get = createAsyncThunk(\"company_info/get\", async (id) => {\n    const res = await axios.get(`${apiUrl}api/company/${id}`, {\n      headers: { \n      },\n    });\n    return res.data;\n});\n\nconst companySlice = createSlice({\n    name: 'company',\n    initialState: {\n        info: {\n            elements: [{id: 0, ローマ字: '', 企業名: '', 分類: ''},],\n        },\n        sheet: {\n            info: {\n                elements: [{id: 0, ローマ字: '', 企業名: '', 分類: ''},],\n            },\n            _table: {\n                elements: [{項目: '', 内容: '', url: ''},],\n                name: '',\n            },\n            _news: {\n                elements: [{題名: '', リンク: '', url: ''},],\n                name: '',\n            },\n            _keywords: {\n                elements: [{題名: '', リンク: '', url: ''},],\n                name: '',\n            },\n        },\n        company_list: [{id: '', name: '', keyword: {}, news: {}, recruit: {}}, ],\n        company_info: {id: '', name: '', keyword: {}, news: {}, recruit: {}},\n\n    },\n    reducers: {\n    \n    },\n    extraReducers: (builder) => {\n        builder.addCase(getSpredSheet.fulfilled, (state, action) => {\n            state.sheet = action.payload;\n        })\n        builder.addCase(fetchAsynCampanyList_Get.fulfilled, (state, action) => {\n            state.company_list = action.payload;\n        })\n        builder.addCase(fetchAsynCampany_Get.fulfilled, (state, action) => {\n            state.company_info = action.payload;\n        })\n    }\n})\n\nexport const { } = companySlice.actions;\nexport const selectSheet = (state) => state.company.sheet;\nexport const selectCompany_list = (state) => state.company.company_list;\nexport const selectCompany_info = (state) => state.company.company_info;\n\nexport default companySlice.reducer;\n\n"]},"metadata":{},"sourceType":"module"}